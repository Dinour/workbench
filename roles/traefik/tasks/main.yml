---
- name: Ensure Teaefik Directory Exist
  file:
    path: "{{project_directory}}/traefik"
    state: directory
  tags: traefik

- name: Ensure Acme File Exists
  copy:
    content: ""
    dest: "{{project_directory}}/traefik/acme.json"
    force: no
    owner: root
    mode: 0600
  no_log: true
  tags: traefik

- name: Ensure Teaefik Configuration Files Exist
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  with_items:
    - {src: config.yml.j2,dest: "{{project_directory}}/traefik/config.yml"}
    - {src: traefik-conf.yml.j2,dest: "{{project_directory}}/traefik/traefik-conf.yml"}
  tags: traefik
  no_log: true
  notify: restart traefik

- name: Create Teaefik Docker Container
  docker_container:
    name: traefik
    image: "traefik:{{traefik_version}}"
    comparisons:
      labels: allow_more_present
      '*': strict
    pull: yes
    hostname: traefik
    restart_policy: unless-stopped
    env:
      DO_AUTH_TOKEN: "{{digitalocean_token}}"
    published_ports:
      - 80:80
      - 443:443
      - 6881:6881
      - 5005:5005
      - 6881:6881/udp
      - 51820:51820/udp
      - 8443:8443
      - 69:69/udp
    networks:
      - name: proxy
    networks_cli_compatible: yes
    state: started
    volumes:
      - "{{project_directory}}/traefik/traefik-conf.yml:/traefik.yml:ro"
      - "{{project_directory}}/traefik/letsencrypt/acme.json:/acme.json"
      - "{{project_directory}}/traefik/config.yml:/config.yml:ro"
      - /etc/localtime:/etc/localtime:ro
    labels:
      traefik.http.routers.http-catchall.rule: "hostregexp(`{host:.+}`)"
      traefik.http.routers.http-catchall.entrypoints: "web"
      traefik.http.routers.http-catchall.middlewares: "redirect-to-https"
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"
      traefik.http.routers.traefiksecure.entrypoints: "websecure"
      traefik.http.routers.traefiksecure.rule: "Host(`api.{{project_tld}}`)"
      traefik.http.routers.traefiksecure.middlewares: "traefik-auth@file"
      traefik.http.routers.traefiksecure.tls: "true"
      traefik.http.routers.wildcard.tls.certresolver: "dnsChallenge"
      traefik.http.routers.wildcard.tls.domains[0].main: "{{project_tld}}"
      traefik.http.routers.wildcard.tls.domains[0].sans: "*.{{project_tld}}"
      traefik.http.routers.wildcard.tls.domains[1].main: "{{git_tld}}"
      traefik.http.routers.wildcard.tls.domains[1].sans: "*.{{git_tld}}"
      traefik.http.routers.wildcard.tls.domains[2].main: "{{jellyfin_tld}}"
      traefik.http.routers.wildcard.tls.domains[2].sans: "*.{{jellyfin_tld}}"
      traefik.http.routers.wildcard.tls.domains[3].main: "{{chat_tld}}"
      traefik.http.routers.wildcard.tls.domains[3].sans: "*.{{chat_tld}}"
      traefik.http.routers.wildcard.tls.domains[4].main: "{{kutt_tld}}"
      traefik.http.routers.wildcard.tls.domains[4].sans: "*.{{kutt_tld}}"
      traefik.http.routers.wildcard.tls.domains[5].main: "{{rtsp_tld}}"
      traefik.http.routers.wildcard.tls.domains[5].sans: "*.{{rtsp_tld}}"
      traefik.http.routers.traefiksecure.service: "api@internal"
      traefik.tcp.routers.wildcard.tls.certresolver: "dnsChallenge"
      traefik.tcp.routers.wildcard.tls.domains[0].main: "{{project_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[0].sans: "*.{{project_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[1].main: "{{git_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[1].sans: "*.{{git_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[2].main: "{{jellyfin_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[2].sans: "*.{{jellyfin_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[3].main: "{{chat_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[3].sans: "*.{{chat_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[4].main: "{{kutt_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[4].sans: "*.{{kutt_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[5].main: "{{rtsp_tld}}"
      traefik.tcp.routers.wildcard.tls.domains[5].sans: "*.{{rtsp_tld}}"
      traefik.enable: "true"
  tags: traefik